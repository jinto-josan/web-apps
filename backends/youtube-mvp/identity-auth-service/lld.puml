@startuml
title Identity-Auth Service - LLD (Optimized)

skinparam shadowing false
skinparam packageStyle rectangle
skinparam classAttributeIconSize 0
skinparam fontName "Helvetica"
skinparam titleFontName "Helvetica"
skinparam legendFontName "Helvetica"
skinparam noteFontName "Helvetica"
skinparam backgroundColor white
skinparam packageBackgroundColor lightblue
skinparam packageBorderColor darkblue
skinparam classBackgroundColor white
skinparam classBorderColor black
skinparam interfaceBackgroundColor lightgreen
skinparam interfaceBorderColor black
skinparam enumBackgroundColor lightyellow
skinparam enumBorderColor black
skinparam arrowColor black
skinparam arrowThickness 2

package "Core Domain" {
    enum UserStatus {
        PENDING_VERIFICATION
        ACTIVE
        LOCKED
        DISABLED
    }
    
    enum TokenState {
        PENDING
        CONSUMED
        EXPIRED
        REVOKED
    }
    
    class User {
        +id: UserId
        +email: EmailAddress
        +displayName: String
        +status: UserStatus
        +emailVerified: boolean
        +passwordHash: String
        +mfaEnabled: boolean
        +createdAt: Instant
        +updatedAt: Instant
    }
    
    class Session {
        +id: SessionId
        +userId: UserId
        +jti: String
        +deviceId: String
        +userAgent: String
        +ip: IpAddress
        +createdAt: Instant
        +revokedAt: Instant
    }
    
    class RefreshToken {
        +id: RefreshTokenId
        +sessionId: SessionId
        +tokenHash: String
        +expiresAt: Instant
        +replacedByTokenId: RefreshTokenId
        +revokedAt: Instant
    }
    
    class EmailVerificationToken {
        +id: EmailVerificationTokenId
        +userId: UserId
        +tokenHash: String
        +expiresAt: Instant
        +consumedAt: Instant
        +state: TokenState
    }
    
    class MfaSecret {
        +id: MfaSecretId
        +userId: UserId
        +algorithm: MfaAlgorithm
        +secretEnc: String
        +digits: int
        +periodSeconds: int
        +verifiedAt: Instant
    }
    
    class DeviceFlow {
        +deviceCode: String
        +userCode: String
        +status: DeviceFlowStatus
        +authorizedUserId: UserId
        +createdAt: Instant
        +authorizedAt: Instant
        +expiresAt: Instant
        +intervalSeconds: int
    }
}

package "Use Cases" {
    class ExchangeTokenUseCase {
        +execute(req: ExchangeRequest): TokenPair
    }
    
    class LoginUseCase {
        +execute(req: LoginRequest): TokenPair
    }
    
    class RefreshUseCase {
        +execute(req: RefreshRequest): TokenPair
    }
    
    class LogoutUseCase {
        +execute(req: LogoutRequest): void
    }
    
    class SignUpUseCase {
        +execute(req: SignUpRequest, clientIp: String): void
    }
    
    class VerifyEmailUseCase {
        +execute(req: VerifyEmailRequest, clientInfo: Map): TokenPair
    }
    
    class StartDeviceFlowUseCase {
        +start(req: StartDeviceFlowRequest): Map
    }
    
    class CompleteDeviceFlowUseCase {
        +activate(req: ActivateDeviceFlowRequest): void
    }
    
    class DevicePollUseCase {
        +poll(req: PollDeviceFlowRequest): TokenPair
    }
    
    class SetupMfaUseCase {
        +setup(userId: UserId): Map
    }
    
    class VerifyMfaUseCase {
        +verify(userId: UserId, code: String): void
    }
}

package "Repositories" {
    interface UserRepository {
        +findByEmail(normalizedEmail: String): Optional
        +findById(userId: UserId): Optional
        +save(user: User): User
        +update(user: User): void
    }
    
    interface SessionRepository {
        +save(newSession: Session): Session
        +revoke(sessionId: SessionId, reason: String): void
    }
    
    interface RefreshTokenRepository {
        +saveNew(sessionId: SessionId, tokenHash: String, expiresAt: Instant): RefreshToken
        +findByHash(tokenHash: String): Optional
        +markReplaced(oldId: RefreshTokenId, newId: RefreshTokenId): void
        +revokeChain(startingId: RefreshTokenId, reason: String): void
    }
    
    interface VerificationTokenRepository {
        +create(t: EmailVerificationToken): EmailVerificationToken
        +findByHash(hash: String): Optional
        +markConsumed(id: EmailVerificationTokenId): void
        +revokeByUser(userId: UserId, reason: String): void
    }
    
    interface MfaRepository {
        +save(secret: MfaSecret): MfaSecret
        +get(userId: UserId): Optional
        +verify(userId: UserId): void
    }
    
    interface DeviceFlowRepository {
        +start(flow: DeviceFlow): void
        +findByUserCode(userCode: String): Optional
        +findByDeviceCode(deviceCode: String): Optional
        +authorize(deviceCode: String, userId: UserId): void
        +delete(deviceCode: String): void
    }
}

package "External Services" {
    interface OidcVerifier {
        +verifyIdToken(idToken: String): DecodedToken
    }
    
    interface TokenService {
        +issueFor(user: User, session: Session): TokenPair
        +refresh(oldRefreshToken: String): TokenPair
    }
    
    interface KeyVaultSigner {
        +signJwt(claims: Map): String
        +getJwks(): String
    }
    
    interface PasswordHasher {
        +hash(plaintext: String): String
        +verify(plaintext: String, hash: String): boolean
    }
    
    interface CaptchaVerifier {
        +verify(token: String, ip: String): boolean
    }
    
    interface EmailSender {
        +send(to: String, subject: String, html: String, text: String): void
    }
    
    interface TotpService {
        +generateUri(userId: UserId, secretEnc: String): String
        +verifyCode(secretEnc: String, code: String): boolean
    }
}

package "Controller" {
    class AuthController {
        +exchange(req: ExchangeRequest): TokenPair
        +login(req: LoginRequest): TokenPair
        +refresh(req: RefreshRequest): TokenPair
        +logout(req: LogoutRequest): void
        +deviceStart(req: StartDeviceFlowRequest): Map
        +deviceActivate(req: ActivateDeviceFlowRequest): void
        +devicePoll(req: PollDeviceFlowRequest): TokenPair
        +mfaSetup(req: SetupMfaRequest): Map
        +mfaVerify(req: VerifyMfaRequest): void
        +signup(req: SignUpRequest): void
        +verifyEmail(req: VerifyEmailRequest): TokenPair
        +resendVerification(req: ResendVerificationRequest): void
        +jwks(): String
    }
}

package "Azure Integrations" {
    class AzureSQL
    class AzureKeyVault
    class Redis
    class AzureServiceBusTopic
    class AzureADB2C
}

' Main associations
AuthController ..> ExchangeTokenUseCase
AuthController ..> LoginUseCase
AuthController ..> RefreshUseCase
AuthController ..> LogoutUseCase
AuthController ..> StartDeviceFlowUseCase
AuthController ..> CompleteDeviceFlowUseCase
AuthController ..> DevicePollUseCase
AuthController ..> SetupMfaUseCase
AuthController ..> VerifyMfaUseCase
AuthController ..> SignUpUseCase
AuthController ..> VerifyEmailUseCase

ExchangeTokenUseCase ..> OidcVerifier
ExchangeTokenUseCase ..> UserRepository
ExchangeTokenUseCase ..> SessionRepository
ExchangeTokenUseCase ..> TokenService

LoginUseCase ..> UserRepository
LoginUseCase ..> PasswordHasher
LoginUseCase ..> SessionRepository
LoginUseCase ..> TokenService

RefreshUseCase ..> RefreshTokenRepository
RefreshUseCase ..> TokenService

SignUpUseCase ..> CaptchaVerifier
SignUpUseCase ..> PasswordHasher
SignUpUseCase ..> UserRepository
SignUpUseCase ..> VerificationTokenRepository
SignUpUseCase ..> EmailSender

VerifyEmailUseCase ..> VerificationTokenRepository
VerifyEmailUseCase ..> UserRepository
VerifyEmailUseCase ..> SessionRepository
VerifyEmailUseCase ..> TokenService

SetupMfaUseCase ..> MfaRepository
SetupMfaUseCase ..> TotpService
VerifyMfaUseCase ..> MfaRepository
VerifyMfaUseCase ..> TotpService
VerifyMfaUseCase ..> UserRepository

StartDeviceFlowUseCase ..> DeviceFlowRepository
CompleteDeviceFlowUseCase ..> DeviceFlowRepository
DevicePollUseCase ..> DeviceFlowRepository
DevicePollUseCase ..> UserRepository
DevicePollUseCase ..> SessionRepository
DevicePollUseCase ..> TokenService

LogoutUseCase ..> SessionRepository
LogoutUseCase ..> RefreshTokenRepository

' Repository implementations
UserRepository ..> AzureSQL
SessionRepository ..> AzureSQL
RefreshTokenRepository ..> AzureSQL
VerificationTokenRepository ..> AzureSQL
MfaRepository ..> AzureSQL
DeviceFlowRepository ..> Redis

' External service implementations
OidcVerifier ..> AzureADB2C
TokenService ..> KeyVaultSigner
KeyVaultSigner ..> AzureKeyVault
PasswordHasher ..> AzureKeyVault
TotpService ..> AzureKeyVault

@enduml
