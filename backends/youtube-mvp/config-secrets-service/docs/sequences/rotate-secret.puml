@startuml Rotate Secret Sequence
participant Client
participant SecretController
participant SecretRotationApplicationService
participant RbacCheckPort
participant KeyVaultPort
participant EventPublisherPort
participant AuditLoggerPort

Client -> SecretController: POST /api/v1/secrets/{scope}/{key}/rotate\nAuthorization: Bearer {JWT}\nBody: {dryRun}
activate SecretController

SecretController -> SecretRotationApplicationService: rotateSecret(scope, key, request, userId, tenantId)
activate SecretRotationApplicationService

SecretRotationApplicationService -> RbacCheckPort: canRotateSecret(userId, tenantId, scope)
activate RbacCheckPort
RbacCheckPort -> RbacCheckPort: Validate JWT claims
RbacCheckPort --> SecretRotationApplicationService: true/false
deactivate RbacCheckPort

alt Access Denied
    SecretRotationApplicationService -> AuditLoggerPort: log(ACCESS_DENIED)
    SecretRotationApplicationService --> SecretController: ResponseStatusException(403)
    SecretController --> Client: 403 Forbidden
else Access Granted
    SecretRotationApplicationService -> SecretRotationApplicationService: Create SecretRotation (status: SCHEDULED)
    
    alt dryRun == false
        SecretRotationApplicationService -> SecretRotationApplicationService: Update status to IN_PROGRESS
        
        SecretRotationApplicationService -> KeyVaultPort: rotateSecret(scope, key)
        activate KeyVaultPort
        KeyVaultPort -> KeyVaultPort: Get current secret
        KeyVaultPort -> KeyVaultPort: Generate new secret value
        KeyVaultPort -> KeyVaultPort: Set new secret version
        KeyVaultPort --> SecretRotationApplicationService: void
        deactivate KeyVaultPort
        
        alt Success
            SecretRotationApplicationService -> SecretRotationApplicationService: Update status to COMPLETED
            SecretRotationApplicationService -> EventPublisherPort: publishSecretRotationCompleted(scope, key, true)
            activate EventPublisherPort
            EventPublisherPort -> EventPublisherPort: Publish to Service Bus
            EventPublisherPort --> SecretRotationApplicationService: void
            deactivate EventPublisherPort
        else Failure
            SecretRotationApplicationService -> SecretRotationApplicationService: Update status to FAILED
            SecretRotationApplicationService -> EventPublisherPort: publishSecretRotationCompleted(scope, key, false)
            activate EventPublisherPort
            EventPublisherPort -> EventPublisherPort: Publish to Service Bus
            EventPublisherPort --> SecretRotationApplicationService: void
            deactivate EventPublisherPort
            SecretRotationApplicationService --> SecretController: ResponseStatusException(500)
            SecretController --> Client: 500 Internal Server Error
        end
    else dryRun == true
        SecretRotationApplicationService -> SecretRotationApplicationService: Update status to COMPLETED (dry-run)
        Note over SecretRotationApplicationService: Skip actual rotation
    end
    
    SecretRotationApplicationService -> AuditLoggerPort: log(SECRET_ROTATE)
    SecretRotationApplicationService --> SecretController: SecretRotationResponse
    SecretController --> Client: 200 OK
end

deactivate SecretRotationApplicationService
deactivate SecretController
@enduml

