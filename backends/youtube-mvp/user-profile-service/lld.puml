@startuml
title User Profile Service - Low-Level Design

skinparam shadowing false
skinparam packageStyle rectangle
skinparam classAttributeIconSize 0
skinparam fontName "Helvetica"
skinparam titleFontName "Helvetica"
skinparam legendFontName "Helvetica"
skinparam noteFontName "Helvetica"
skinparam backgroundColor white
skinparam packageBackgroundColor lightblue
skinparam packageBorderColor darkblue
skinparam classBackgroundColor white
skinparam classBorderColor black
skinparam interfaceBackgroundColor lightgreen
skinparam interfaceBorderColor black

package "Domain Layer (Core)" <<clean>> {
    class AccountProfile {
        -accountId: String
        -displayName: String
        -photoUrl: String
        -locale: String
        -country: String
        -timezone: String
        -privacySettings: PrivacySettings
        -notificationSettings: NotificationSettings
        -accessibilityPreferences: AccessibilityPreferences
        -version: int
        -etag: String
    }
    
    class PrivacySettings {
        -subscriptionsPrivate: Boolean
        -savedPlaylistsPrivate: Boolean
        -restrictedModeEnabled: Boolean
    }
    
    class NotificationSettings {
        -emailOptIn: Boolean
        -pushOptIn: Boolean
        -marketingOptIn: Boolean
    }
    
    class AccessibilityPreferences {
        -captionsAlwaysOn: Boolean
        -autoplayDefault: Boolean
    }
    
    interface ProfileRepository {
        +findByAccountId(accountId): Optional<AccountProfile>
        +save(profile): AccountProfile
        +update(profile): AccountProfile
        +exists(accountId): boolean
        +delete(accountId): void
    }
    
    interface EventPublisher {
        +publishProfileUpdated(event): void
        +publishPrivacySettingsChanged(event): void
        +publishNotificationPrefsChanged(event): void
    }
    
    interface CacheService {
        +cacheProfile(accountId, data): void
        +getCachedProfile(accountId): String
        +invalidateProfile(accountId): void
    }
}

package "Application Layer" <<clean>> {
    interface Saga {
        +execute(): AccountProfile
        +getSagaId(): String
        +getSagaType(): String
    }
    
    class UpdateProfileSaga {
        -sagaId: String
        -command: UpdateProfileCommand
        -execute(): AccountProfile
        -compensate(): void
    }
    
    class UpdateProfileCommand {
        -accountId: String
        -displayName: String
        -photoUrl: String
        -etag: String
    }
    
    class GetProfileQuery {
        -accountId: String
    }
    
    interface ProfileUseCase {
        +updateProfile(command): AccountProfile
        +getProfile(query): AccountProfile
        +updatePrivacySettings(command): PrivacySettings
        +getPrivacySettings(query): PrivacySettings
    }
}

package "Infrastructure Layer" <<clean>> {
    class ProfileEntity {
        -id: Long
        -accountId: String
        -displayName: String
        -privacySettings: PrivacySettingsEmbeddable
        -notificationSettings: NotificationSettingsEmbeddable
        -accessibilityPreferences: AccessibilityPreferencesEmbeddable
    }
    
    class ProfileRepositoryImpl {
        +findByAccountId(accountId): Optional<AccountProfile>
        +update(profile): AccountProfile
    }
    
    class EventPublisherImpl {
        +publishProfileUpdated(event): void
    }
    
    class CacheServiceImpl {
        +cacheProfile(accountId, data): void
        +invalidateProfile(accountId): void
    }
    
    class SecurityConfig {
        +securityFilterChain(): SecurityFilterChain
        +jwtAuthConverter(): Converter
    }
}

package "Interface Layer" <<clean>> {
    class ProfileController {
        +GET /profiles/{accountId}
        +PATCH /profiles/{accountId}
        +GET /profiles/{accountId}/privacy
        +PUT /profiles/{accountId}/privacy
        +GET /profiles/{accountId}/notifications
        +PUT /profiles/{accountId}/notifications
    }
}

' Relationships
ProfileController --> ProfileUseCase
ProfileUseCase --> UpdateProfileSaga
UpdateProfileSaga --> ProfileRepository
UpdateProfileSaga --> EventPublisher
UpdateProfileSaga --> CacheService

ProfileRepository <|.. ProfileRepositoryImpl
EventPublisher <|.. EventPublisherImpl
CacheService <|.. CacheServiceImpl

' Domain to Infrastructure
ProfileEntity <-- ProfileRepositoryImpl

@enduml
